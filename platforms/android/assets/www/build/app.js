function config($ionicConfigProvider,$compileProvider,ParseProvider){$compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|file|blob|content|ms-appx|x-wmapp0):|data:image\/|img\//),$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|ghttps?|ms-appx|x-wmapp0):/),ParseProvider.initialize("nYsB6tmBMYKYMzM5iV9BUcBvHWX89ItPX5GfbN6Q","zrin8GEBDVGbkl1ioGEwnHuP70FdG6HhzTS8uGjz"),ionic.Platform.isIOS()&&$ionicConfigProvider.scrolling.jsScrolling(!0)}function routes($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("app/loading"),$stateProvider.state("app",{url:"/app","abstract":!0,cache:!1,templateUrl:"templates/menu.html",controller:"MenuCtrl",resolve:{tournament:["TournamentServices","$q","Parse","$state",function(TournamentServices,$q,Parse,$state){var cb=$q.defer();return TournamentServices.getTournament().then(function(tournaments){tournaments.length&&cb.resolve(tournaments[0])},function(error){ionic.Platform.exitApp()}),cb.promise}]}}).state("app.prizes",{url:"/prizes",views:{menuContent:{templateUrl:"templates/prizes.html"}}}).state("app.loading",{url:"/loading",views:{menuContent:{templateUrl:"templates/loading.html"}}}).state("app.dashboard",{url:"/dashboard",views:{menuContent:{templateUrl:"templates/dashboard.html",controller:"DashboardCtrl"}}}).state("app.login",{url:"/login",cache:!1,views:{menuContent:{templateUrl:"templates/login.html",controller:"LoginCtrl"}}}).state("app.register",{url:"/register",cache:!1,views:{menuContent:{templateUrl:"templates/register.html",controller:"RegisterCtrl"}}}).state("app.reset",{url:"/password",cache:!1,views:{menuContent:{templateUrl:"templates/password.html",controller:"ResetPasswordCtrl"}}})}function run($ionicPlatform,$state,$rootScope,$ionicLoading,$ionicPopup,locationServices,$ionicHistory,$cordovaNetwork,$window){$ionicPlatform.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault(),$ionicPlatform.registerBackButtonAction(function(e){if($ionicHistory.backView())$state.go($ionicHistory.backView().stateName);else{var confirmPopup=$ionicPopup.confirm({title:"Confirm Exit",template:"Are you sure you want to close Battlezone Beta?"});confirmPopup.then(function(close){close&&ionic.Platform.exitApp(),console.log("User canceled exit.")})}return e.preventDefault(),!1},101),$rootScope.$on("$cordovaNetwork:online",function(event,networkState){}),$rootScope.$on("$cordovaNetwork:offline",function(event,networkState){$ionicPopup.alert({title:"Internet Disconnected",content:"The internet is disconnected on your device."}).then(function(){ionic.Platform.exitApp()})}),$rootScope.$on("show:loading",function(){$ionicLoading.show({template:'<ion-spinner icon="spiral" class="spinner-calm"></ion-spinner>',showBackdrop:!0,animation:"fade-in"})}),$rootScope.$on("hide:loading",function(){$ionicLoading.hide()}),$ionicPlatform.on("resume",function(){}),window.ParsePushPlugin&&(console.log("new version 1"),ParsePushPlugin.on("receivePN",function(pn){if(console.log(pn),pn.title)switch(pn.title){case"Opponent Found":$state.go("app.dashboard",{reload:!0});break;case"Opponent Confirmed":$state.go("app.dashboard",{reload:!0});break;case"Results Entered":$ionicPopup.alert({title:"Match Played",template:'<div class="text-center">Results have been submitted</div>'}).then(function(res){$state.go("app.dashboard",{reload:!0})})}else $ionicPopup.alert({title:"Announcement",template:'<div class="text-center">'+pn.alert+"</div>"}).then(function(res){})})),"#/app/loading"===window.location.hash&&locationServices.getLocation().then(function(location){locationServices.setLocation(location),$ionicHistory.nextViewOptions({disableBack:!0}),$state.go("app.dashboard")},function(err){navigator&&navigator.splashscreen&&navigator.splashscreen.hide(),$state.go("app.dashboard")})})}function AdminMatchCtrl($scope,Parse,MatchServices,match,$ionicPopup){$scope.match=match,console.log($scope.match),$scope.showDate=function(date){return moment(date).format("MM/DD hh:mm A")},$scope.changeWinner=function(){$ionicPopup.show({templateUrl:"templates/popups/change.match.html",title:"Confirm",scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Confirm</b>",type:"button-positive",onTap:function(e){return $scope.match.adminNote||e.preventDefault(),!0}}]}).then(function(res){if(res){var winner=$scope.match.winner,loser=$scope.match.loser,winPoints=winner.get("points")-450,losePoints=loser.get("points")+450,winCount=winner.get("wins")-1,loseCount=loser.get("losses")-1;winner.set("points",winPoints),loser.set("points",losePoints),winner.set("wins",winCount),loser.set("losses",loseCount),loser.increment("wins"),winner.increment("losses"),$scope.match.set("status","resolved"),$scope.match.set("winner",loser),$scope.match.set("loser",winner),$scope.match.save().then(function(){$scope.match=match})}})},$scope.keepWinner=function(){$ionicPopup.show({templateUrl:"templates/popups/change.match.html",title:"Confirm",scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Confirm</b>",type:"button-positive",onTap:function(e){return $scope.match.adminNote||e.preventDefault(),!0}}]}).then(function(res){res&&($scope.match.set("status","resolved"),$scope.match.save().then(function(){$scope.match=match}))})}}function AdminMatchesCtrl($scope,Parse,MatchServices,moment){MatchServices.getReportedMatches().then(function(matches){$scope.matches=matches}),$scope.showDate=function(date){return moment(date).format("MM/DD hh:mm A")}}function AdminPlayersCtrl($scope,Parse,LadderServices){$scope.search={input:null},$scope.searchPlayer=function(){LadderServices.searchPlayers($scope.search.input).then(function(players){$scope.players=players})}}function AdminSettingsCtrl($scope,locationServices,newTournament,tournament){$scope.details=newTournament,$scope.tournament=tournament.tournament,$scope.setTournamentLocation=function(){locationServices.getLocation().then(function(location){var point=new Parse.GeoPoint({latitude:location.latitude,longitude:location.longitude});$scope.tournament.set("location",point),$scope.tournament.save().then(function(tournament){$scope.tournament=tournament,alert("tournmanet location set")})})}}function DashboardCtrl($scope,$state,$filter,$timeout,$interval,$ionicPopup,$rootScope,moment,Parse,tournament,MatchServices,QueueServices,LadderServices,locationServices){function setNotifications(){window.ParsePushPlugin&&ParsePushPlugin.subscribe($scope.player.username,function(msg){console.log("subbed to "+$scope.player.username)},function(e){console.log("failed to sub")});var userGeoPoint=$scope.player.get("location");if(userGeoPoint){var query=new Parse.Query("Tournament");query.withinMiles("location",userGeoPoint,50),query.limit(10),query.find({success:function(placesObjects){console.log(placesObjects),window.ParsePushPlugin&&placesObjects.length&&ParsePushPlugin.subscribe("pax-east",function(msg){console.log("paxed")},function(e){console.log("failed to sub")})}})}}function getStatus(){$timeout(function(){$scope.player.fetch().then(function(player){status()})},2e3)}function status(){if($scope.player){switch($scope.player.get("status")){case"open":$scope.stop();break;case"queue":$scope.showOpponents(),matchMaking();break;case"found":break;case"confirmed":waitingForOpponent();break;case"noOpponent":noOpponent();break;case"playing":getLastMatch();break;case"cancelled":playerCancelled()}console.log($scope.player.get("status"))}}function timer(){var now=moment(),time=$scope.match.get("activeDate");if(time){var fiveMinutes=moment(time).add(5,"minutes");$scope.end.time=parseFloat(fiveMinutes.format("x")),$scope.end.canPlay=now.isAfter(fiveMinutes,"seconds")}}function savePlayer(){$scope.player.save().then(function(player){$scope.player=player,status()})}function matchMaking(){$timeout(function(){Parse.Cloud.run("matchmaking").then(function(res){console.log("matchmaking started"),MatchServices.getLatestMatch($scope.player).then(function(matches){matches.length&&($scope.match=matches[0]),getStatus()})})},15e3)}function showCancelledMatch(){$ionicPopup.alert({title:"Match Cancelled",template:'<div class="text-center">You have failed to confirm</div>'}).then(function(res){$scope.player.set("status","open"),savePlayer()})}function confirmPlayer(){"player1"===$scope.player.player?$scope.match.set("confirm1",!0):$scope.match.set("confirm2",!0),$scope.match.save().then(function(match){$scope.match=match,$scope.player.set("status","confirmed"),savePlayer()})}function waitingForOpponent(){Parse.Cloud.run("confirmMatch").then(function(num){checkOpponent(1e4,!1),checkOpponent(5e4,!0)})}function checkOpponent(timeout,alreadyChecked){$timeout(function(){"confirmed"===$scope.player.get("status")&&$scope.match.fetch().then(function(match){$scope.match=match,checkMatchStatus(alreadyChecked)})},timeout)}function checkMatchStatus(alreadyChecked){switch($scope.match.get("status")){case"pending":alreadyChecked&&($scope.player.set("status","noOpponent"),savePlayer());break;case"active":$scope.player.set("status","playing"),$rootScope.$broadcast("show:loading"),$scope.player.save().then(function(){$rootScope.$broadcast("hide:loading"),$state.go("app.match.view")});break;case"cancelled":$scope.player.set("status","open"),savePlayer();break;case"completed":$scope.player.set("status","open"),savePlayer()}}function noOpponent(){$ionicPopup.show({title:"Match Error",template:'<div class="text-center"><strong>Your Opponent</strong><br> failed to confirm!</div>',buttons:[{text:"<b>Back</b>",type:"button-assertive",onTap:function(e){return!1}},{text:"<b>Queue Again</b>",type:"button-positive",onTap:function(e){return!0}}]}).then(function(res){res?($scope.player.set("status","queue"),$scope.match.set("status","cancelled"),$scope.match.save().then(function(){savePlayer()})):($scope.player.set("status","open"),$scope.match.set("status","cancelled"),$scope.match.save().then(function(){savePlayer()}))})}function getLastMatch(){"completed"===$scope.match.get("status")&&($scope.player.set("status","open"),savePlayer())}function changeWord(){$scope.myOpponent.name=$scope.opponent.list[Math.floor(Math.random()*$scope.opponent.list.length)]}var promise=null;$scope.tournament=tournament.tournament,$scope.user=Parse.User,$scope.end={canPlay:!0,time:parseFloat(moment().format("x"))},$scope.location=locationServices.location,$scope.opponent=QueueServices.opponent,$scope.heroList=QueueServices.heroes,$scope.myOpponent={name:"PAX Attendee"},$scope.$on("$ionicView.enter",function(event){navigator&&navigator.splashscreen&&navigator.splashscreen.hide(),$rootScope.$broadcast("show:loading"),LadderServices.getPlayer($scope.tournament,$scope.user.current()).then(function(players){players.length?($scope.player=players[0],$scope.player.set("location",$scope.location.coords),$scope.player.save().then(function(player){$scope.player=player,MatchServices.getLatestMatch($scope.player).then(function(matches){matches.length&&($scope.match=matches[0],timer()),setNotifications(),status(),$rootScope.$broadcast("hide:loading"),$scope.$broadcast("scroll.refreshComplete")})})):($rootScope.$broadcast("hide:loading"),$scope.$broadcast("scroll.refreshComplete"))})}),$scope.doRefresh=function(){$state.reload("app.dashboard")},$scope.startQueue=function(){$scope.end.canPlay&&($scope.player.set("status","queue"),savePlayer())},$scope.cancelQueue=function(){$scope.player.set("status","open"),$scope.stop(),savePlayer()},$scope.playerConfirm=function(){$scope.match.fetch().then(function(match){switch($scope.match=match,$scope.match.get("status")){case"pending":confirmPlayer();break;case"cancelled":showCancelledMatch()}})},$scope.stop=function(){$interval.cancel(promise)},$scope.showOpponents=function(){$scope.stop(),promise=$interval(function(){changeWord()},2e3)},$scope.setToOpen=function(){$scope.player.set("status","open"),savePlayer()},$scope.finished=function(){$timeout(timer,1500)},$scope.$on("$destroy",function(){$scope.stop()}),$scope.$on("destroy",function(){console.log("controller destroyed")})}function LadderJoinCtrl($scope,$filter,$ionicPopup,$state,$ionicHistory,$q,Parse,tournament,LadderServices,$rootScope){function validateBattleTag(){var cb=$q.defer(),tag=$scope.player.battleTag;if(tag.length<8)return cb.reject("Enter your full battle tag"),cb.promise;var split=tag.split("#");return 2!==split.length?(cb.reject("Enter your full BATTLETAG™ including # and four digits"),cb.promise):split[1].length<2||split[1].length>4?(cb.reject("Your BATTLETAG™ must including up to four digits after #!"),cb.promise):isNaN(split[1])?(cb.reject("Your BATTLETAG™ must including four digits after #"),cb.promise):(LadderServices.validatePlayer($scope.tournament.tournament,tag).then(function(results){results.length?cb.reject("The BATTLETAG™ you entered is already registered."):cb.resolve(tag)}),cb.promise)}function ErrorPopup(message){return $ionicPopup.alert({title:"Registration Error",template:message})}function SuccessPopup(player){return $ionicPopup.alert({title:"Congratulations "+player.username+"!",template:"You have successfully signed up! Now go find a valiant opponent."})}$ionicHistory.nextViewOptions({disableBack:!0}),$scope.tournament=tournament.tournament,$scope.user=Parse.User.current(),$scope.player={battleTag:""},$scope.registerPlayer=function(){validateBattleTag().then(function(tag){$rootScope.$broadcast("show:loading"),$scope.player.username=$scope.user.username,$scope.player.status="open",LadderServices.joinTournament($scope.tournament,$scope.user,$scope.player).then(function(player){SuccessPopup(player).then(function(res){$rootScope.$broadcast("hide:loading"),$state.go("app.dashboard")})},function(err){alert(err.message),$rootScope.$broadcast("show:loading")})},function(error){ErrorPopup(error)})}}function LeaderBoardsCtrl($scope,LadderServices,tournament,Parse,$rootScope){function getPlayers(){$rootScope.$broadcast("show:loading"),LadderServices.getPlayers(tournament.tournament).then(function(players){var rank=1;angular.forEach(players,function(player){player.rank=rank,rank++}),$scope.players=players,$rootScope.$broadcast("hide:loading"),$scope.$broadcast("scroll.refreshComplete")})}$scope.user=Parse.User,getPlayers(),$scope.doRefresh=function(){getPlayers()}}function ResetPasswordCtrl($scope,$ionicPopup,$state,$ionicHistory,Parse){function ErrorPopup(message){return $ionicPopup.alert({title:"Update Error",template:message})}function SuccessPopup(){return $ionicPopup.alert({title:"Password Reset",template:"An Email has been sent to reset your password"}).then(function(res){$state.go("app.dashboard")})}$ionicHistory.nextViewOptions({disableBack:!0}),$scope.email={},$scope.resetPassword=function(email){Parse.User.requestPasswordReset(email.text,{success:function(){SuccessPopup()},error:function(error){ErrorPopup(error.message)}})}}function LadderProfileCtrl($scope,$filter,$ionicPopup,$state,$ionicHistory,$q,Parse,tournament,LadderServices,player,$rootScope){function validateBattleTag(){var cb=$q.defer(),tag=$scope.player.battleTag;if(tag.length<8)return cb.reject("Enter your full battle tag"),cb.promise;var split=tag.split("#");return 2!==split.length?(cb.reject("Enter your full BATTLETAG™ including # and four digits"),cb.promise):split[1].length<2||split[1].length>4?(cb.reject("Your BATTLETAG™ must including up to four digits after #!"),cb.promise):isNaN(split[1])?(cb.reject("Your BATTLETAG™ must including four digits after #"),cb.promise):(LadderServices.validatePlayer($scope.tournament.tournament,tag).then(function(results){results.length?cb.reject("The BATTLETAG™ you entered is already registered."):cb.resolve(tag)}),cb.promise)}function ErrorPopup(message){return $ionicPopup.alert({title:"Update Error",template:message})}function SuccessPopup(player){return $ionicPopup.alert({title:"Congratulations "+player.username+"!",template:"You have successfully updated! Now go and play!"})}$ionicHistory.nextViewOptions({disableBack:!0}),$scope.tournament=tournament.tournament,$scope.user=Parse.User.current(),$scope.player=player[0],$scope.registerPlayer=function(){validateBattleTag().then(function(tag){$rootScope.$broadcast("show:loading"),$scope.player.save().then(function(){$rootScope.$broadcast("hide:loading"),SuccessPopup(player).then(function(res){$state.go("app.dashboard")})},function(err){alert(err.message),$rootScope.$broadcast("hide:loading")})},function(error){ErrorPopup(error)})}}function LoginCtrl($scope,$state,Parse,$ionicHistory){$scope.user={},Parse.User.logOut(),$scope.loginUser=function(){Parse.User.logIn($scope.user.username,$scope.user.password,{success:function(user){$ionicHistory.nextViewOptions({disableBack:!0}),$state.go("app.dashboard")},error:function(user,error){$scope.warning=error.message}})},$scope.$watch("user",function(newVal,oldVal){$scope.warning=null},!0)}function MatchListCtrl($scope,$state,$ionicPopup,$rootScope,Parse,MatchServices,player){function showReported(){$ionicPopup.alert({title:"Too Many Reports",template:'<div class="text-center">You have too many pending reports. Please wait.</div>'}).then(function(){})}$scope.matches=[],$scope.player=player[0],$scope.player&&($rootScope.$broadcast("show:loading"),MatchServices.getPlayerMatches($scope.player,null).then(function(matches){console.log("matches fetched"),$scope.matches=matches,MatchServices.getPlayerMatches($scope.player,"reported").then(function(reported){$scope.reported=reported,$rootScope.$broadcast("hide:loading")})})),$scope.processMatch=function(match){return match.winner.id===$scope.player.id||match.loser.id===$scope.player.id&&match.reportReason?void 0:$scope.reported.length?void showReported():void("completed"===match.status&&$state.go("app.match.report",{id:match.id}))}}function MatchReportCtrl($scope,$state,$rootScope,$ionicPopup,$ionicHistory,Parse,MatchServices,cameraServices,report){$scope.match=report,$scope.picture=null;var parseFile=new Parse.File,imgString=null;$scope.getPicture=function(){var options=cameraServices.camera;navigator.camera.getPicture(onSuccess,onFail,options)};var onSuccess=function(imageData){$scope.picture="data:image/png;base64,"+imageData,imgString=imageData,$scope.$apply()},onFail=function(e){console.log("On fail "+e)};$scope.processReport=function(name){parseFile=imgString?new Parse.File("report.png",{base64:imgString}):null,$scope.match.set("reportImage",parseFile),$scope.match.set("status","reported"),$scope.match.save().then(function(match){$ionicHistory.nextViewOptions({disableBack:!0}),$ionicPopup.alert({title:"Match Reported",template:'<div class="text-center">Thank you for submitting the report.</div>'}).then(function(){$state.go("app.dashboard")})})}}function MatchViewCtrl($scope,$state,$rootScope,$ionicPopup,$ionicHistory,$timeout,Parse,LadderServices,MatchServices,QueueServices,cameraServices,tournament){function winMatch(){return $scope.picture=null,$scope.errorMessage=null,$ionicPopup.show({templateUrl:"templates/popups/win.match.html",title:"Report a Win",scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Confirm</b>",type:"button-positive",onTap:function(e){return $scope.picture?!0:($scope.errorMessage="Upload a Screenshot",void e.preventDefault())}}]})}function loseMatch(){return $ionicPopup.show({templateUrl:"templates/popups/lose.match.html",title:"Report a Loss",scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Confirm</b>",type:"button-positive",onTap:function(e){return!0}}]})}function getMatch(refresh){MatchServices.getMatch($scope.match.id).then(function(match){$scope.match=match,console.log("match"+$scope.match.get("status")),console.log("match fetched"),console.log($scope.match.get("winner")),refresh&&$scope.$broadcast("scroll.refreshComplete")})}function recordMatch(username){$rootScope.$broadcast("show:loading"),$scope.match.set("status","completed"),$scope.match.save().then(function(match){$scope.match=match,$timeout(function(){Parse.Cloud.run("matchResults",{match:$scope.match.id,username:username}).then(function(){$scope.match.winner.fetch().then(function(winner){console.log(winner),$scope.match.winner=winner}),$rootScope.$broadcast("hide:loading")},function(err){alert(err.message),$rootScope.$broadcast("hide:loading")})},2e3)})}function getMatchDetails(){$scope.opponent={hero:null,battleTag:null},"player1"===$scope.player.player&&($scope.opponent.hero=$scope.match.hero2,$scope.opponent.username=$scope.match.username2,$scope.opponent.battleTag=$scope.match.battleTag2,$scope.opponent.user=$scope.match.player2),"player2"===$scope.player.player&&($scope.opponent.hero=$scope.match.hero1,$scope.opponent.username=$scope.match.username1,$scope.opponent.battleTag=$scope.match.battleTag1,$scope.opponent.user=$scope.match.player1)}var parseFile=new Parse.File,imgString=null;$scope.tournament=tournament.tournament,$scope.user=Parse.User,$scope.picture=null,$ionicHistory.nextViewOptions({disableBack:!0}),$scope.$on("$ionicView.enter",function(event){$rootScope.$broadcast("show:loading"),LadderServices.getPlayer($scope.tournament,$scope.user.current()).then(function(players){$scope.player=players[0],MatchServices.getLatestMatch($scope.player).then(function(matches){$rootScope.$broadcast("hide:loading"),$scope.match=matches[0],"cancelled"===$scope.match.get("status")&&($scope.player.set("status","open"),$scope.player.save().then(function(){$state.go("app.dashboard")})),getMatchDetails()})})}),$scope.$on("$ionicView.leave",function(event){loseMatch().close(),winMatch().close()}),$scope.getPicture=function(){if(cameraServices.camera){var options=cameraServices.camera;navigator.camera.getPicture(onSuccess,onFail,options)}};var onSuccess=function(imageData){$scope.picture="data:image/png;base64,"+imageData,imgString=imageData,$scope.$apply()},onFail=function(e){console.log("On fail "+e)};$scope.doRefresh=function(){getMatch(!0)},$scope.record=function(record){MatchServices.getLatestMatch($scope.player).then(function(matches){var username=null;if($scope.match=matches[0],"active"===$scope.match.get("status"))switch(record){case"win":winMatch().then(function(res){console.log(res),res&&(imgString&&(parseFile=new Parse.File("winning.png",{base64:imgString}),$scope.match.set("winImage",parseFile)),$scope.match.set("winner",$scope.player),$scope.match.set("loser",$scope.opponent.user),username=$scope.opponent.username,recordMatch(username))});break;case"loss":loseMatch().then(function(res){console.log(res),res&&($scope.match.set("winner",$scope.opponent.user),$scope.match.set("loser",$scope.player),username=$scope.opponent.username,recordMatch(username))})}})}}function MenuCtrl($scope,$ionicPopover,$state,$ionicHistory,Parse,$timeout){$scope.user=Parse.User,$ionicPopover.fromTemplateUrl("templates/popovers/profile.pop.html",{scope:$scope}).then(function(popover){$scope.popover=popover}),$scope.menu=function(link){"login"===link?($ionicHistory.nextViewOptions({disableBack:!0}),window.ParsePushPlugin&&ParsePushPlugin.unsubscribe($scope.user.current().username,function(msg){console.log("unsubbed")},function(e){console.log("failed to sub")}),$timeout(function(){Parse.User.logOut().then(function(user){$state.go("app."+link,{reload:!0})})},1e3)):$state.go("app."+link,{reload:!0}),$scope.popover.hide()},$scope.$on("$destroy",function(){$scope.popover.remove()})}function RegisterCtrl($scope,$state,Parse,$ionicPopup,$rootScope){function ErrorPopup(message){return $ionicPopup.alert({title:"Registration Error",template:message})}$scope.user={},$scope.RegisterUser=function(user){$rootScope.$broadcast("show:loading");var register=new Parse.User;register.set(user),register.signUp(null,{success:function(user){$rootScope.$broadcast("hide:loading"),$state.go("app.dashboard")},error:function(user,error){$rootScope.$broadcast("show:loading"),ErrorPopup(error.message)}})},$scope.$watch("user",function(newVal,oldVal){$scope.warning=null},!0)}function AdminRoutes($stateProvider){$stateProvider.state("app.admin",{url:"/admin","abstract":!0,cache:!1,views:{menuContent:{templateUrl:"templates/admin/admin.html"}}}).state("app.admin.settings",{url:"/settings",cache:!1,templateUrl:"templates/admin/admin.settings.html",controller:"AdminSettingsCtrl",resolve:{tourney:["TournamentServices",function(TournamentServices){return TournamentServices.getTournament()}],newTournament:["TournamentServices","tourney",function(TournamentServices,tourney){return tourney.length?tourney[0]:TournamentServices.createTournament()}]}}).state("app.admin.matches",{url:"/matches",cache:!1,templateUrl:"templates/admin/admin.matches.html",controller:"AdminMatchesCtrl"}).state("app.admin.match",{url:"/match/:id",cache:!1,templateUrl:"templates/admin/admin.match.html",controller:"AdminMatchCtrl",resolve:{match:["MatchServices","$stateParams",function(MatchServices,$stateParams){return MatchServices.getMatchDetails($stateParams.id)}]}}).state("app.admin.players",{url:"/players",cache:!1,templateUrl:"templates/admin/admin.players.html",controller:"AdminPlayersCtrl"})}function LadderRoutes($stateProvider){$stateProvider.state("app.ladder",{url:"/ladder","abstract":!0,cache:!1,views:{menuContent:{templateUrl:"templates/ladder/ladder.html"}}}).state("app.ladder.leaderboard",{url:"/leaderboards",cache:!1,templateUrl:"templates/ladder/leaderboard.html",controller:"LeaderBoardsCtrl"}).state("app.ladder.join",{url:"/join",cache:!1,templateUrl:"templates/ladder/join.html",controller:"LadderJoinCtrl"}).state("app.ladder.profile",{url:"/profile",cache:!1,templateUrl:"templates/ladder/profile.html",controller:"LadderProfileCtrl",resolve:{player:["Parse","LadderServices","tournament",function(Parse,LadderServices,tournament){return LadderServices.getPlayer(tournament.tournament,Parse.User.current())}]}})}function MatchRoutes($stateProvider){$stateProvider.state("app.match",{url:"/match","abstract":!0,views:{menuContent:{templateUrl:"templates/match/match.html"}}}).state("app.match.list",{url:"/list",templateUrl:"templates/match/match.list.html",controller:"MatchListCtrl",cache:!1,resolve:{player:["Parse","LadderServices","tournament",function(Parse,LadderServices,tournament){return LadderServices.getPlayer(tournament.tournament,Parse.User.current())}]}}).state("app.match.view",{url:"/view",templateUrl:"templates/match/match.view.html",controller:"MatchViewCtrl"}).state("app.match.report",{url:"/report/:id",cache:!1,templateUrl:"templates/match/match.report.html",controller:"MatchReportCtrl",resolve:{report:["MatchServices","$stateParams",function(MatchServices,$stateParams){return MatchServices.getMatch($stateParams.id)}]}})}function LadderServices(Parse,Ladder){function searchPlayers(input){var query=new Parse.Query(Ladder.Model);return query.startsWith("username",input),query.find()}function getPendingPlayers(tournament,user){var query=new Parse.Query(Ladder.Model);return query.equalTo("tournament",tourney),query.notEqualTo("user",user),query.equalTo("status","queue"),query.find()}function getPlayers(tourney){var query=new Parse.Query(Ladder.Model);return query.equalTo("tournament",tourney),query.descending("points","mmr"),query.find()}function validatePlayer(tourney,battleTag){var query=new Parse.Query(Ladder.Model);return query.equalTo("tournament",tourney),query.equalTo("battleTag",battleTag),query.find()}function getPlayer(tourney,user){var query=new Parse.Query(Ladder.Model);return query.equalTo("tournament",tourney),query.equalTo("user",user),query.limit(1),query.find()}function joinTournament(tourney,user,userData){var player=new Ladder.Model;return player.set("tournament",tourney),player.set("user",user),player.set(userData),player.set("wins",0),player.set("losses",0),player.set("points",0),player.save()}return{getPlayers:getPlayers,getPlayer:getPlayer,validatePlayer:validatePlayer,joinTournament:joinTournament,getPendingPlayers:getPendingPlayers,searchPlayers:searchPlayers}}function Ladder(Parse){var Model=Parse.Object.extend("Ladder"),attributes=["tournament","user","battleTag","username","location","banned","hero","player","status","cancelTimer","wins","losses","mmr","points","banReason","admin"];return Parse.defineAttributes(Model,attributes),{Model:Model}}function locationServices(Parse,$cordovaGeolocation,$q){function setLocation(coords){location.coords=new Parse.GeoPoint({latitude:coords.latitude,longitude:coords.longitude})}function getLocation(){var cb=$q.defer(),posOptions={enableHighAccuracy:!1};return $cordovaGeolocation.getCurrentPosition(posOptions).then(function(position){cb.resolve(position.coords)},function(err){console.log(err),cb.reject(err)}),cb.promise}var location={coords:new Parse.GeoPoint};return{location:location,getLocation:getLocation,setLocation:setLocation}}function MatchServices(Parse,Match,$q){function getPlayerMatches(player,status){var player1=new Parse.Query(Match.Model);player1.equalTo("player1",player);var player2=new Parse.Query(Match.Model);player2.equalTo("player2",player);var mainQuery=Parse.Query.or(player1,player2);return mainQuery.descending("createdAt"),mainQuery.limit(10),status&&mainQuery.equalTo("status",status),mainQuery.find()}function getLatestMatch(player){var type=player.get("player"),query=new Parse.Query(Match.Model);return query.include("winner"),query.include("loser"),query.descending("createdAt"),query.limit(1),"player1"===type?query.equalTo("player1",player):query.equalTo("player2",player),query.find()}function getConfirmedMatch(player){var type=player.get("player"),query=new Parse.Query("Match");return query.equalTo("status","active"),query.descending("createdAt"),"player1"===type?query.equalTo("player1",player):query.equalTo("player2",player),query.equalTo("confirm1",!0),query.equalTo("confirm2",!0),query.limit(1),query.find()}function getReportedMatches(){var query=new Parse.Query("Match");return query.equalTo("status","reported"),query.descending("createdAt"),query.find()}function getPendingMatch(player){var type=player.get("player"),query=new Parse.Query(Match.Model);return query.descending("createdAt"),query.limit(1),"player1"===type?query.equalTo("player1",player):query.equalTo("player2",player),query.equalTo("status","pending"),query.limit(1),query.find()}function getMatch(id){var match=new Match.Model;return match.id=id,match.fetch()}function getMatchDetails(id){var query=new Parse.Query(Match.Model);return query.include("winner"),query.include("loser"),query.descending("createdAt"),query.get(id)}Parse.User;return{getConfirmedMatch:getConfirmedMatch,getPendingMatch:getPendingMatch,getReportedMatches:getReportedMatches,getLatestMatch:getLatestMatch,getMatch:getMatch,getPlayerMatches:getPlayerMatches,getMatchDetails:getMatchDetails}}function Match(Parse){var Model=Parse.Object.extend("Match"),attributes=["tournament","player1","player2","hero1","hero2","username1","username2","battleTag1","battleTag2","status","winner","loser","winImage","reportReason","reportImage","activeDate","user1","user2","adminNote"];return Parse.defineAttributes(Model,attributes),{Model:Model}}function cameraServices($window){var camera={quality:90,targetWidth:320,targetHeight:500,allowEdit:!0,sourceType:0};return $window.Camera&&(camera.destinationType=Camera.DestinationType.DATA_URL,camera.encodingType=Camera.EncodingType.JPEG),{camera:camera}}function QueueServices(){var opponent={list:["Easy Pickings","Your Worst Nightmare","World class paste eater","A Murloc","Gourd critic","Nose and mouth breather","Hogger","A cardish Ian","Mopey Mage","Wombat Warlock","Rouged up Rogue","Waifish Warrior","Damp Druid","Shabby Shaman","Penniless Paladin","Huffy Hunter","Perky Priest","The Worst Player","Your Old Roommate","StarCraft Pro","Fiscally responsible mime","Your Guild Leader","Noneck George","Gum Pusher","Cheater McCheaterson","Really slow guy","Roach Boy","Orange Rhymer","Coffee Addict","Inward Talker","Blizzard Developer","Grand Master","Diamond League Player","Brand New Player","Dastardly Death Knight","Mediocre Monk","A Little Puppy"]},heroes=[{text:"mage",checked:!1},{text:"hunter",checked:!1},{
text:"paladin",checked:!1},{text:"warrior",checked:!1},{text:"druid",checked:!1},{text:"warlock",checked:!1},{text:"shaman",checked:!1},{text:"priest",checked:!1},{text:"rogue",checked:!1}];return{opponent:opponent,heroes:heroes}}function TournamentServices(Parse,$q,Tournament,Details,Ladder){function joinTournament(tourney,joinPlayer){var player=new Ladder.Model(joinPlayer);return player.set("tournament",tourney),player.set("user",Parse.User.current()),player.set("username",Parse.User.current().username),player.set("mmr",1e3),player.set("wins",0),player.set("losses",0),player.set("points",0),player.save()}function getTournament(){var query=new Parse.Query(Details.Model);return query.equalTo("type","ladder"),query.include("tournament"),query.find()}function createTournament(){var defer=$q.defer(),tournament=new Tournament.Model;return tournament.set("name","ONOG OPEN"),tournament.set("status","pending"),tournament.set("game","hearthstone"),tournament.save().then(function(tourney){var details=new Details.Model;details.set("tournament",tourney),details.set("type","ladder"),details.set("playerCount",0),details.set("numOfGames",5),details.save().then(function(details){defer.resolve(details)})}),defer.promise}function getLadder(tourney){var query=new Parse.Query(Ladder.Model);return query.equalTo("tournament",tourney),query.include("player"),query.find()}return{getTournament:getTournament,createTournament:createTournament,getLadder:getLadder,joinTournament:joinTournament}}function Tournament(Parse){var Model=Parse.Object.extend("Tournament"),attributes=["name","game","status","disabled","disabledReason","location"];return Parse.defineAttributes(Model,attributes),{Model:Model}}function Details(Parse){var Model=Parse.Object.extend("Details"),attributes=["tournament","type","numOfGames","playerCount"];return Parse.defineAttributes(Model,attributes),{Model:Model}}config.$inject=["$ionicConfigProvider","$compileProvider","ParseProvider"],routes.$inject=["$stateProvider","$urlRouterProvider"],run.$inject=["$ionicPlatform","$state","$rootScope","$ionicLoading","$ionicPopup","locationServices","$ionicHistory","$cordovaNetwork","$window"],AdminMatchCtrl.$inject=["$scope","Parse","MatchServices","match","$ionicPopup"],AdminMatchesCtrl.$inject=["$scope","Parse","MatchServices","moment"],AdminPlayersCtrl.$inject=["$scope","Parse","LadderServices"],AdminSettingsCtrl.$inject=["$scope","locationServices","newTournament","tournament"],DashboardCtrl.$inject=["$scope","$state","$filter","$timeout","$interval","$ionicPopup","$rootScope","moment","Parse","tournament","MatchServices","QueueServices","LadderServices","locationServices"],LadderJoinCtrl.$inject=["$scope","$filter","$ionicPopup","$state","$ionicHistory","$q","Parse","tournament","LadderServices","$rootScope"],LeaderBoardsCtrl.$inject=["$scope","LadderServices","tournament","Parse","$rootScope"],ResetPasswordCtrl.$inject=["$scope","$ionicPopup","$state","$ionicHistory","Parse"],LadderProfileCtrl.$inject=["$scope","$filter","$ionicPopup","$state","$ionicHistory","$q","Parse","tournament","LadderServices","player","$rootScope"],LoginCtrl.$inject=["$scope","$state","Parse","$ionicHistory"],MatchListCtrl.$inject=["$scope","$state","$ionicPopup","$rootScope","Parse","MatchServices","player"],MatchReportCtrl.$inject=["$scope","$state","$rootScope","$ionicPopup","$ionicHistory","Parse","MatchServices","cameraServices","report"],MatchViewCtrl.$inject=["$scope","$state","$rootScope","$ionicPopup","$ionicHistory","$timeout","Parse","LadderServices","MatchServices","QueueServices","cameraServices","tournament"],MenuCtrl.$inject=["$scope","$ionicPopover","$state","$ionicHistory","Parse","$timeout"],RegisterCtrl.$inject=["$scope","$state","Parse","$ionicPopup","$rootScope"],AdminRoutes.$inject=["$stateProvider"],LadderRoutes.$inject=["$stateProvider"],MatchRoutes.$inject=["$stateProvider"],LadderServices.$inject=["Parse","Ladder"],Ladder.$inject=["Parse"],locationServices.$inject=["Parse","$cordovaGeolocation","$q"],MatchServices.$inject=["Parse","Match","$q"],Match.$inject=["Parse"],cameraServices.$inject=["$window"],TournamentServices.$inject=["Parse","$q","Tournament","Details","Ladder"],Tournament.$inject=["Parse"],Details.$inject=["Parse"],angular.module("ONOG.config",[]).config(config),angular.module("ONOG.Controllers",[]),angular.module("ONOG",["ionic","ngParse","timer","ngCordova","ngAnimate","ONOG.config","ONOG.routes","ONOG.Controllers","ONOG.Services"]),angular.module("ONOG.routes",["ONOG.routes.matches","ONOG.routes.ladder","ONOG.routes.admin"]).config(routes),angular.module("ONOG").constant("moment",moment).run(run),angular.module("ONOG.Services",[]),angular.module("ONOG.Controllers").controller("AdminMatchCtrl",AdminMatchCtrl),angular.module("ONOG.Controllers").controller("AdminMatchesCtrl",AdminMatchesCtrl),angular.module("ONOG.Controllers").controller("AdminPlayersCtrl",AdminPlayersCtrl),angular.module("ONOG.Controllers").controller("AdminSettingsCtrl",AdminSettingsCtrl),angular.module("ONOG.Controllers").controller("DashboardCtrl",DashboardCtrl),angular.module("ONOG.Controllers").controller("LadderJoinCtrl",LadderJoinCtrl),angular.module("ONOG.Controllers").controller("LeaderBoardsCtrl",LeaderBoardsCtrl),angular.module("ONOG.Controllers").controller("ResetPasswordCtrl",ResetPasswordCtrl),angular.module("ONOG.Controllers").controller("LadderProfileCtrl",LadderProfileCtrl),angular.module("ONOG.Controllers").controller("LoginCtrl",LoginCtrl),angular.module("ONOG.Controllers").controller("MatchListCtrl",MatchListCtrl),angular.module("ONOG.Controllers").controller("MatchReportCtrl",MatchReportCtrl),angular.module("ONOG.Controllers").controller("MatchViewCtrl",MatchViewCtrl),angular.module("ONOG.Controllers").controller("MenuCtrl",MenuCtrl),angular.module("ONOG.Controllers").controller("RegisterCtrl",RegisterCtrl),angular.module("ONOG.routes.admin",[]).config(AdminRoutes),angular.module("ONOG.routes.ladder",[]).config(LadderRoutes),angular.module("ONOG.routes.matches",[]).config(MatchRoutes),angular.module("ONOG.Services").service("LadderServices",LadderServices).factory("Ladder",Ladder),angular.module("ONOG.Services").service("locationServices",locationServices),angular.module("ONOG.Services").service("MatchServices",MatchServices).factory("Match",Match),angular.module("ONOG.Services").service("cameraServices",cameraServices),angular.module("ONOG.Services").service("QueueServices",QueueServices),angular.module("ONOG.Services").service("TournamentServices",TournamentServices).factory("Tournament",Tournament).factory("Details",Details);